'use client'

import { useState, useEffect } from 'react'
import { Plus, Minus, Navigation, AlertCircle, Check, ChevronsUpDown } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from "@/components/ui/command"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"

const nswStations = [
  { name: 'Central', lat: -33.8832, lon: 151.2067 },
  { name: 'Parramatta', lat: -33.8150, lon: 151.0011 },
  { name: 'Penrith', lat: -33.7511, lon: 150.6942 },
  { name: 'Hornsby', lat: -33.7035, lon: 151.0982 },
  { name: 'Cronulla', lat: -34.0581, lon: 151.1543 },
  { name: 'Bondi Junction', lat: -33.8916, lon: 151.2501 },
]

export default function NSWRailMidpointFinder() {
  const [locations, setLocations] = useState(['', ''])
  const [midpoint, setMidpoint] = useState(null)
  const [directions, setDirections] = useState([])
  const [error, setError] = useState('')
  const [open, setOpen] = useState([false, false])

  useEffect(() => {
    setError('')
  }, [locations])

  const addLocation = () => {
    setLocations([...locations, ''])
    setOpen([...open, false])
  }

  const removeLocation = (index) => {
    const newLocations = locations.filter((_, i) => i !== index)
    const newOpen = open.filter((_, i) => i !== index)
    setLocations(newLocations.length >= 2 ? newLocations : ['', ''])
    setOpen(newOpen.length >= 2 ? newOpen : [false, false])
  }

  const handleLocationChange = (index, value) => {
    const newLocations = [...locations]
    newLocations[index] = value
    setLocations(newLocations)
    const newOpen = [...open]
    newOpen[index] = false
    setOpen(newOpen)
  }

  const calculateMidpoint = () => {
    const validLocations = locations.filter(loc => 
      nswStations.some(station => station.name.toLowerCase() === loc.toLowerCase())
    )

    if (validLocations.length < 2) {
      setError('Please enter at least two valid NSW rail stations.')
      setMidpoint(null)
      setDirections([])
      return
    }

    const stationCoords = validLocations.map(loc => 
      nswStations.find(station => station.name.toLowerCase() === loc.toLowerCase())
    )

    const midLat = stationCoords.reduce((sum, station) => sum + station.lat, 0) / stationCoords.length
    const midLon = stationCoords.reduce((sum, station) => sum + station.lon, 0) / stationCoords.length

    const midpointStation = nswStations.reduce((closest, station) => {
      const distance = Math.sqrt(
        Math.pow(station.lat - midLat, 2) + Math.pow(station.lon - midLon, 2)
      )
      return distance < closest.distance ? { station, distance } : closest
    }, { station: null, distance: Infinity }).station

    setMidpoint(midpointStation)

    const newDirections = validLocations.map(loc => {
      const start = nswStations.find(station => station.name.toLowerCase() === loc.toLowerCase())
      return generateDirections(start, midpointStation)
    })

    setDirections(newDirections)
  }

  const generateDirections = (start, end) => {
    // Simplified direction generation
    const lines = {
      'T1': ['Central', 'Parramatta', 'Penrith'],
      'T4': ['Bondi Junction', 'Central', 'Cronulla'],
      'T9': ['Central', 'Hornsby'],
    }

    let route = []
    let currentLine = null

    for (const [line, stations] of Object.entries(lines)) {
      if (stations.includes(start.name) && stations.includes(end.name)) {
        currentLine = line
        const startIndex = stations.indexOf(start.name)
        const endIndex = stations.indexOf(end.name)
        route = stations.slice(Math.min(startIndex, endIndex), Math.max(startIndex, endIndex) + 1)
        if (startIndex > endIndex) route.reverse()
        break
      }
    }

    if (route.length === 0) {
      return `From ${start.name} to ${end.name}: No direct route found. You may need to change lines at Central.`
    }

    return `From ${start.name} to ${end.name}: Take the ${currentLine} line through ${route.join(', ')}.`
  }

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>NSW Rail Midpoint Finder</CardTitle>
        <CardDescription>Find a meeting point between multiple NSW rail stations</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {locations.map((location, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Popover open={open[index]} onOpenChange={(isOpen) => {
                const newOpen = [...open]
                newOpen[index] = isOpen
                setOpen(newOpen)
              }}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={open[index]}
                    className="w-[200px] justify-between"
                  >
                    {location || `Select station ${index + 1}`}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-[200px] p-0">
                  <Command>
                    <CommandInput placeholder={`Search station ${index + 1}...`} />
                    <CommandEmpty>No station found.</CommandEmpty>
                    <CommandGroup>
                      <ScrollArea className="h-[200px]">
                        {nswStations.map((station) => (
                          <CommandItem
                            key={station.name}
                            onSelect={() => handleLocationChange(index, station.name)}
                          >
                            <Check
                              className={cn(
                                "mr-2 h-4 w-4",
                                location === station.name ? "opacity-100" : "opacity-0"
                              )}
                            />
                            {station.name}
                          </CommandItem>
                        ))}
                      </ScrollArea>
                    </CommandGroup>
                  </Command>
                </PopoverContent>
              </Popover>
              {index >= 2 && (
                <Button variant="outline" size="icon" onClick={() => removeLocation(index)}>
                  <Minus className="h-4 w-4" />
                  <span className="sr-only">Remove location</span>
                </Button>
              )}
            </div>
          ))}
          <Button onClick={addLocation}>
            <Plus className="h-4 w-4 mr-2" /> Add Location
          </Button>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col items-start space-y-4">
        <Button onClick={calculateMidpoint}>Find Midpoint</Button>
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        {midpoint && (
          <div>
            <h3 className="text-lg font-semibold">Midpoint Station: {midpoint.name}</h3>
            <ul className="list-disc list-inside mt-2">
              {directions.map((direction, index) => (
                <li key={index} className="flex items-center">
                  <Navigation className="h-4 w-4 mr-2" aria-hidden="true" />
                  {direction}
                </li>
              ))}
            </ul>
          </div>
        )}
      </CardFooter>
    </Card>
  )
}
